{"ast":null,"code":"var _jsxFileName = \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js\";\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: testTodoListData.todoLists,\n      currentList: null\n    };\n\n    this.goHome = () => {\n      this.updateListChanges(this.state.currentList);\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n      this.setState({\n        currentList: null\n      });\n    };\n\n    this.loadList = todoListToLoad => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoListToLoad\n      });\n      console.log(\"currentList: \" + this.state.currentList);\n      console.log(\"currentScreen: \" + this.state.currentScreen);\n    };\n\n    this.updateListChanges = list => {\n      let newLists = [...this.state.todoLists];\n      let targetKey = list.key; // Delete old version of list from lists\n\n      newLists = [...newLists.filter(list => list.key !== targetKey)];\n      newLists = [...newLists.filter(list => console.log(list.key))]; // Add new version of list to top of lists\n\n      newLists = [list, ...newLists];\n      newLists = [...newLists.filter(list => console.log(list.key))]; //Update state\n\n      this.setState({\n        todoLists: newLists\n      });\n    };\n\n    this.addToLists = list => {\n      this.setState({\n        todoLists: [list, ...this.state.todoLists]\n      });\n    };\n\n    this.removeFromLists = key => {\n      this.setState({\n        todoLists: [...this.state.todoLists.filter(list => list.key !== key)]\n      });\n    };\n  }\n\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          goHome: this.goHome.bind(this),\n          todoList: this.state.currentList,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","App","state","currentScreen","todoLists","currentList","goHome","updateListChanges","setState","loadList","todoListToLoad","console","log","list","newLists","targetKey","key","filter","addToLists","removeFromLists","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n}\n\nclass App extends Component {\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: testTodoListData.todoLists,\n    currentList: null\n  }\n\n  goHome = () => {\n    this.updateListChanges(this.state.currentList);\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n    this.setState({currentList: null});\n  }\n\n  loadList = (todoListToLoad) => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoListToLoad});\n    console.log(\"currentList: \" + this.state.currentList);\n    console.log(\"currentScreen: \" + this.state.currentScreen);\n  }\n\n  updateListChanges = (list) => {\n    let newLists = [...this.state.todoLists];\n    let targetKey = list.key;\n\n    // Delete old version of list from lists\n    newLists = [...newLists.filter(list => list.key !== targetKey)];\n    newLists = [...newLists.filter(list => console.log(list.key))];\n\n    // Add new version of list to top of lists\n    newLists = [list, ...newLists];\n    newLists = [...newLists.filter(list => console.log(list.key))];\n\n    //Update state\n    this.setState({todoLists: newLists});\n  }\n  \n  // Add to top of lists\n  addToLists = (list) => {\n    this.setState({todoLists: [list, ...this.state.todoLists]});\n  }\n  // Remove from lists\n  removeFromLists = (key) => {\n    this.setState({todoLists: [...this.state.todoLists.filter(list => list.key !== key)]});\n  }\n\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} />;\n      case AppScreen.LIST_SCREEN:       \n        return <ListScreen\n          goHome={this.goHome.bind(this)}\n          todoList={this.state.currentList} />;\n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}