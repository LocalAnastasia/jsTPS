{"ast":null,"code":"var _jsxFileName = \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js\";\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: testTodoListData.todoLists,\n      currentList: null,\n      currentItem: null\n    };\n\n    this.goHome = () => {\n      this.updateListChanges(this.state.currentList);\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n      this.setState({\n        currentList: null\n      });\n    };\n\n    this.goItem = item => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n      this.setState({\n        currentItem: item\n      });\n    };\n\n    this.updateItem = item => {};\n\n    this.loadList = todoListToLoad => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoListToLoad\n      });\n    };\n\n    this.updateListChanges = list => {\n      let targetKey = list.key; // Delete old version of list from lists, if it exists\n\n      let newLists = [...this.state.todoLists].filter(list => list.key !== targetKey); // Add new version of list to top of lists\n\n      newLists = [list, ...newLists]; //Reorder keys\n\n      newLists = this.updateIndices(newLists); // Update state\n\n      this.setState({\n        todoLists: newLists\n      });\n    };\n\n    this.updateIndices = lists => {\n      for (var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n      }\n\n      return lists;\n    };\n\n    this.addToLists = list => {\n      this.setState({\n        todoLists: [list, ...this.state.todoLists]\n      });\n    };\n\n    this.removeFromLists = key => {\n      this.setState({\n        todoLists: [...this.state.todoLists.filter(list => list.key !== key)]\n      });\n    };\n  }\n\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          goHome: this.goHome.bind(this),\n          goItem: this.goItem.bind(this),\n          todoList: this.state.currentList,\n          updateListChanges: this.updateListChanges.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen, {\n          currentScreen: this.state.currentScreen,\n          todoItem: this.state.currentItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","App","state","currentScreen","todoLists","currentList","currentItem","goHome","updateListChanges","setState","goItem","item","updateItem","loadList","todoListToLoad","list","targetKey","key","newLists","filter","updateIndices","lists","i","length","addToLists","removeFromLists","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n}\n\nclass App extends Component {\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: testTodoListData.todoLists,\n    currentList: null,\n    currentItem: null\n  }\n\n  goHome = () => {\n    this.updateListChanges(this.state.currentList);\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n    this.setState({currentList: null});\n  }\n\n  goItem = (item) => {\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    this.setState({currentItem: item});\n  }\n\n  updateItem = (item) => {\n    \n  }\n\n  loadList = (todoListToLoad) => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoListToLoad});\n  }\n\n  updateListChanges = (list) => {\n    let targetKey = list.key;\n\n    // Delete old version of list from lists, if it exists\n    let newLists = [...this.state.todoLists].filter(list => list.key !== targetKey);\n\n    // Add new version of list to top of lists\n    newLists = [list, ...newLists];\n\n    //Reorder keys\n    newLists = this.updateIndices(newLists);\n\n    // Update state\n    this.setState({todoLists: newLists});\n  }\n\n  updateIndices = (lists) => {\n    for(var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n    }\n    return lists;\n  }\n  \n  // Add to top of lists\n  addToLists = (list) => {\n    this.setState({todoLists: [list, ...this.state.todoLists]});\n  }\n  // Remove from lists\n  removeFromLists = (key) => {\n    this.setState({todoLists: [...this.state.todoLists.filter(list => list.key !== key)]});\n  }\n\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} />;\n      case AppScreen.LIST_SCREEN:       \n        return <ListScreen\n          goHome={this.goHome.bind(this)}\n          goItem={this.goItem.bind(this)}\n          todoList={this.state.currentList} \n          updateListChanges={this.updateListChanges.bind(this)} />;\n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n          currentScreen={this.state.currentScreen}\n          todoItem={this.state.currentItem} />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}