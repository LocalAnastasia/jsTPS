{"ast":null,"code":"import _defineProperty from \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nimport jsTPS from './jsTPS/src/jsTPS/jsTPS.js';\nimport todoList from './jsTPS/test/demo/todoList.js';\nimport todoItem from './jsTPS/test/demo/todoItem.js';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.tps = new jsTPS();\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: testTodoListData.todoLists,\n      currentList: null,\n      currentItem: null,\n      modalIsVisible: false\n    };\n\n    this.deleteList = () => {\n      let newLists = [...this.state.todoLists];\n      newLists = this.removeFromLists(newLists, this.state.currentList.key);\n      this.setState({\n        todoLists: newLists\n      });\n      this.setState({\n        currentList: null\n      });\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goHome = () => {\n      this.tps.clearAllTransactions();\n\n      if (this.state.currentList) {\n        let newList = this.state.currentList;\n\n        if (newList.name.trim() === \"\") {\n          newList.name = \"Untitled\";\n        }\n\n        this.updateListChanges(newList);\n        this.setState({\n          currentList: null\n        });\n      }\n\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goItem = item => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n      this.setState({\n        currentItem: item\n      });\n    };\n\n    this.submitItem = item => {\n      this.updateItem(item);\n      this.exitItem();\n    };\n\n    this.exitItem = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentItem: null\n      });\n    };\n\n    this.updateItem = newItem => {\n      let newList = _objectSpread({}, this.state.currentList);\n\n      let newItems = [...newList.items];\n\n      if (newItem.key === newItems.length) {\n        // If it is a new item\n        newItems = [...newItems, newItem];\n      } else {\n        // If it is an existing item\n        newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n      }\n\n      newList.items = newItems;\n      this.setState({\n        currentList: newList\n      });\n      this.updateListChanges(newList);\n    };\n\n    this.createListObject = list => {\n      var key = list.key;\n      var name = list.name;\n      var owner = list.owner;\n      var items = list.items;\n      var todoListObject = new todoList(key, name, owner, items);\n      return todoListObject;\n    };\n\n    this.createListObjectItem = item => {\n      var key = item.key;\n      var description = item.description;\n      var assigned_to = item.assigned_to;\n      var due_date = item.due_date;\n      var completed = item.completed;\n      var todoListObjectItem = new todoItem();\n      return;\n    };\n\n    this.loadList = todoListToLoad => {\n      var todoList = this.createListObject(todoListToLoad);\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoList\n      });\n    };\n\n    this.updateListChanges = list => {\n      let targetKey = list.key; // Delete old version of list from lists, if it exists\n\n      let newLists = this.removeFromLists([...this.state.todoLists], targetKey); // Add new version of list to top of lists\n\n      newLists = this.addToLists(newLists, list); //Reorder keys\n\n      newLists = this.updateIndices(newLists); // Update state\n\n      this.setState({\n        todoLists: newLists\n      });\n    };\n\n    this.updateIndices = lists => {\n      for (var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n      }\n\n      return lists;\n    };\n\n    this.addToLists = (lists, list) => {\n      return [list, ...lists];\n    };\n\n    this.removeFromLists = (lists, targetKey) => {\n      let newLists = lists.filter(list => list.key !== targetKey);\n      return newLists;\n    };\n  }\n\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          tps: this.tps,\n          deleteList: this.deleteList.bind(this),\n          goHome: this.goHome.bind(this),\n          goItem: this.goItem.bind(this),\n          todoList: this.state.currentList,\n          updateListChanges: this.updateListChanges.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen, {\n          currentScreen: this.state.currentScreen,\n          todoItem: this.state.currentItem,\n          submitItem: this.submitItem.bind(this),\n          exitItem: this.exitItem.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","jsTPS","todoList","todoItem","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","MODAL_SCREEN","App","tps","state","currentScreen","todoLists","currentList","currentItem","modalIsVisible","deleteList","newLists","removeFromLists","key","setState","goHome","clearAllTransactions","newList","name","trim","updateListChanges","goItem","item","submitItem","updateItem","exitItem","newItem","newItems","items","length","map","createListObject","list","owner","todoListObject","createListObjectItem","description","assigned_to","due_date","completed","todoListObjectItem","loadList","todoListToLoad","targetKey","addToLists","updateIndices","lists","i","filter","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\nimport jsTPS from './jsTPS/src/jsTPS/jsTPS.js'\nimport todoList from './jsTPS/test/demo/todoList.js'\nimport todoItem from './jsTPS/test/demo/todoItem.js'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n}\n\nclass App extends Component {\n  tps = new jsTPS();\n\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: testTodoListData.todoLists,\n    currentList: null,\n    currentItem: null,\n    modalIsVisible: false\n  }\n\n  deleteList = () => {\n    let newLists = [...this.state.todoLists];\n    newLists = this.removeFromLists(newLists, this.state.currentList.key);\n    this.setState({todoLists: newLists});\n    this.setState({currentList: null});\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goHome = () => {\n    this.tps.clearAllTransactions();\n    if (this.state.currentList){\n      let newList = this.state.currentList;\n      if (newList.name.trim() === \"\") {\n        newList.name = \"Untitled\";\n      }\n      this.updateListChanges(newList);\n      this.setState({currentList: null});\n    }\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goItem = (item) => {\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    this.setState({currentItem: item});\n  }\n  submitItem = (item) => {\n    this.updateItem(item);\n    this.exitItem();\n  }\n\n  exitItem = () => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentItem: null});\n  }\n\n  updateItem = (newItem) => {\n    let newList = {...this.state.currentList};\n    let newItems = [...newList.items];\n    if (newItem.key === newItems.length) { // If it is a new item\n      newItems = [...newItems, newItem];\n    }\n    else { // If it is an existing item\n      newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n    }\n    newList.items = newItems;\n    this.setState({currentList: newList});\n    this.updateListChanges(newList);\n  }\n\n  createListObject = (list) => {\n    var key = list.key;\n    var name = list.name;\n    var owner = list.owner;\n    var items = list.items;\n    var todoListObject = new todoList(key, name, owner, items);\n\n    return todoListObject;\n  }\n\n  createListObjectItem = (item) => {\n    var key = item.key;\n    var description = item.description;\n    var assigned_to = item.assigned_to;\n    var due_date = item.due_date;\n    var completed = item.completed;\n    var todoListObjectItem = new todoItem()\n    \n    return\n  }\n  loadList = (todoListToLoad) => {\n    var todoList = this.createListObject(todoListToLoad);\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoList});\n  }\n\n  updateListChanges = (list) => {\n    let targetKey = list.key;\n\n    // Delete old version of list from lists, if it exists\n    let newLists = this.removeFromLists([...this.state.todoLists], targetKey);\n\n    // Add new version of list to top of lists\n    newLists = this.addToLists(newLists, list);\n\n    //Reorder keys\n    newLists = this.updateIndices(newLists);\n\n    // Update state\n    this.setState({todoLists: newLists});\n  }\n\n  updateIndices = (lists) => {\n    for(var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n    }\n    return lists;\n  }\n  \n  // Add to top of lists\n  addToLists = (lists, list) => {\n    return [list, ...lists];\n  }\n  // Remove from lists\n  removeFromLists = (lists, targetKey) => {\n    let newLists = lists.filter(list => list.key !== targetKey);\n    return newLists;\n  }\n\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} />;\n      case AppScreen.LIST_SCREEN:  \n        return <ListScreen\n          tps={this.tps}\n          deleteList={this.deleteList.bind(this)}\n          goHome={this.goHome.bind(this)}\n          goItem={this.goItem.bind(this)}\n          todoList={this.state.currentList} \n          updateListChanges={this.updateListChanges.bind(this)} />; \n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n          currentScreen={this.state.currentScreen}\n          todoItem={this.state.currentItem}\n          submitItem={this.submitItem.bind(this)}\n          exitItem={this.exitItem.bind(this)} />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}