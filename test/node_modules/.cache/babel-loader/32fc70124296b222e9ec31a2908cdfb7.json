{"ast":null,"code":"import _defineProperty from \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nimport jsTPS from './jsTPS/src/jsTPS/jsTPS.js';\nimport todoList from './jsTPS/test/demo/todoList.js';\nimport todoItem from './jsTPS/test/demo/todoItem.js';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.tps = new jsTPS();\n\n    this.createListObjectItem = item => {\n      var key = item.key;\n      var description = item.description;\n      var assignedTo = item.assigned_to;\n      var dueDate = item.due_date;\n      var completed = item.completed;\n      var todoListObjectItem = new todoItem(key, description, assignedTo, dueDate, completed);\n      return todoListObjectItem;\n    };\n\n    this.createListObject = list => {\n      var todoListObject = null;\n\n      if (list) {\n        var key = list.key;\n        var name = list.name;\n        var owner = list.owner;\n        var items = [];\n\n        for (var i = 0; i < list.items.length; i++) {\n          var itemObject = this.createListObjectItem(list.items[i]);\n          items.push(itemObject);\n        }\n      } else {\n        var key = this.props.todoLists.length;\n        var name = '';\n        var owner = '';\n        var items = [];\n      }\n\n      todoListObject = new todoList(key, name, owner, items);\n      return todoListObject;\n    };\n\n    this.initTodoLists = todoLists => {\n      var listOfTodoListsObject = [];\n\n      for (var i = 0; i < todoLists.length; i++) {\n        listOfTodoListsObject.push(this.createListObject(todoLists[i]));\n      }\n\n      return listOfTodoListsObject;\n    };\n\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: this.initTodoLists(testTodoListData.todoLists),\n      currentList: null,\n      currentItem: null,\n      modalIsVisible: false\n    };\n\n    this.deleteList = () => {\n      let newLists = [...this.state.todoLists];\n      newLists = this.removeFromLists(newLists, this.state.currentList.key);\n      this.setState({\n        todoLists: newLists\n      });\n      this.setState({\n        currentList: null\n      });\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goHome = () => {\n      this.tps.clearAllTransactions();\n\n      if (this.state.currentList) {\n        let newList = this.state.currentList;\n\n        if (newList.name.trim() === \"\") {\n          newList.name = \"Untitled\";\n        }\n\n        this.updateListChanges(newList);\n        this.setState({\n          currentList: null\n        });\n      }\n\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goItem = item => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n      this.setState({\n        currentItem: item\n      });\n    };\n\n    this.submitItem = item => {\n      this.updateItem(item);\n      this.exitItem();\n    };\n\n    this.exitItem = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentItem: null\n      });\n    };\n\n    this.updateItem = newItem => {\n      let newList = _objectSpread({}, this.state.currentList);\n\n      let newItems = [...newList.items];\n\n      if (newItem.key === newItems.length) {\n        // If it is a new item\n        newItems = [...newItems, newItem];\n      } else {\n        // If it is an existing item\n        newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n      }\n\n      newList.items = newItems;\n      this.setState({\n        currentList: newList\n      });\n      this.updateListChanges(newList);\n    };\n\n    this.loadList = todoListToLoad => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoListToLoad\n      });\n    };\n\n    this.updateListChanges = list => {\n      let targetKey = list.key; // Delete old version of list from lists, if it exists\n\n      let newLists = this.removeFromLists([...this.state.todoLists], targetKey); // Add new version of list to top of lists\n\n      newLists = this.addToLists(newLists, this.createListObject(list)); //Reorder keys\n\n      newLists = this.updateIndices(newLists); // Update state\n\n      this.setState({\n        todoLists: newLists\n      });\n    };\n\n    this.updateIndices = lists => {\n      for (var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n      }\n\n      return lists;\n    };\n\n    this.addToLists = (lists, list) => {\n      return [list, ...lists];\n    };\n\n    this.removeFromLists = (lists, targetKey) => {\n      let newLists = lists.filter(list => list.key !== targetKey);\n      return newLists;\n    };\n  }\n\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          createNewList: this.createListObject,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          tps: this.tps,\n          deleteList: this.deleteList.bind(this),\n          goHome: this.goHome.bind(this),\n          goItem: this.goItem.bind(this),\n          todoList: this.state.currentList,\n          updateListChanges: this.updateListChanges.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen, {\n          currentScreen: this.state.currentScreen,\n          todoItem: this.state.currentItem,\n          submitItem: this.submitItem.bind(this),\n          exitItem: this.exitItem.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","jsTPS","todoList","todoItem","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","MODAL_SCREEN","App","tps","createListObjectItem","item","key","description","assignedTo","assigned_to","dueDate","due_date","completed","todoListObjectItem","createListObject","list","todoListObject","name","owner","items","i","length","itemObject","push","props","todoLists","initTodoLists","listOfTodoListsObject","state","currentScreen","currentList","currentItem","modalIsVisible","deleteList","newLists","removeFromLists","setState","goHome","clearAllTransactions","newList","trim","updateListChanges","goItem","submitItem","updateItem","exitItem","newItem","newItems","map","loadList","todoListToLoad","targetKey","addToLists","updateIndices","lists","filter","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\nimport jsTPS from './jsTPS/src/jsTPS/jsTPS.js'\nimport todoList from './jsTPS/test/demo/todoList.js'\nimport todoItem from './jsTPS/test/demo/todoItem.js'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n}\n\nclass App extends Component {\n  tps = new jsTPS();\n\n  createListObjectItem = (item) => {\n    var key = item.key;\n    var description = item.description;\n    var assignedTo = item.assigned_to;\n    var dueDate = item.due_date;\n    var completed = item.completed;\n    var todoListObjectItem = new todoItem(key, description, assignedTo, dueDate, completed);\n\n    return todoListObjectItem;\n  }\n\n  createListObject = (list) => {\n    var todoListObject = null;\n\n    if (list) {\n      var key = list.key;\n      var name = list.name;\n      var owner = list.owner;\n      var items = [];\n      for (var i = 0; i < list.items.length; i++) {\n        var itemObject = this.createListObjectItem(list.items[i]);\n        items.push(itemObject);\n      }\n    }\n    else {\n      var key = this.props.todoLists.length;\n      var name = '';\n      var owner = '';\n      var items = [];\n    }\n\n    todoListObject = new todoList(key, name, owner, items);\n    return todoListObject;\n  }\n\n  initTodoLists = (todoLists) => {\n    var listOfTodoListsObject = []\n    for (var i = 0; i < todoLists.length; i++) {\n      listOfTodoListsObject.push(this.createListObject(todoLists[i]));\n    }\n    return listOfTodoListsObject;\n  }\n\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: this.initTodoLists(testTodoListData.todoLists),\n    currentList: null,\n    currentItem: null,\n    modalIsVisible: false\n  }\n\n  deleteList = () => {\n    let newLists = [...this.state.todoLists];\n    newLists = this.removeFromLists(newLists, this.state.currentList.key);\n    this.setState({todoLists: newLists});\n    this.setState({currentList: null});\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goHome = () => {\n    this.tps.clearAllTransactions();\n    if (this.state.currentList){\n      let newList = this.state.currentList;\n      if (newList.name.trim() === \"\") {\n        newList.name = \"Untitled\";\n      }\n      this.updateListChanges(newList);\n      this.setState({currentList: null});\n    }\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goItem = (item) => {\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    this.setState({currentItem: item});\n  }\n  submitItem = (item) => {\n    this.updateItem(item);\n    this.exitItem();\n  }\n\n  exitItem = () => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentItem: null});\n  }\n\n  updateItem = (newItem) => {\n    let newList = {...this.state.currentList};\n    let newItems = [...newList.items];\n    if (newItem.key === newItems.length) { // If it is a new item\n      newItems = [...newItems, newItem];\n    }\n    else { // If it is an existing item\n      newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n    }\n    newList.items = newItems;\n    this.setState({currentList: newList});\n    this.updateListChanges(newList);\n  }\n\n  loadList = (todoListToLoad) => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoListToLoad});\n  }\n\n  updateListChanges = (list) => {\n    let targetKey = list.key;\n\n    // Delete old version of list from lists, if it exists\n    let newLists = this.removeFromLists([...this.state.todoLists], targetKey);\n\n    // Add new version of list to top of lists\n    newLists = this.addToLists(newLists, this.createListObject(list));\n\n    //Reorder keys\n    newLists = this.updateIndices(newLists);\n\n    // Update state\n    this.setState({todoLists: newLists});\n  }\n\n  updateIndices = (lists) => {\n    for(var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n    }\n    return lists;\n  }\n  \n  // Add to top of lists\n  addToLists = (lists, list) => {\n    return [list, ...lists];\n  }\n  // Remove from lists\n  removeFromLists = (lists, targetKey) => {\n    let newLists = lists.filter(list => list.key !== targetKey);\n    return newLists;\n  }\n\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists}\n        createNewList={this.createListObject} />;\n      case AppScreen.LIST_SCREEN:  \n        return <ListScreen\n          tps={this.tps}\n          deleteList={this.deleteList.bind(this)}\n          goHome={this.goHome.bind(this)}\n          goItem={this.goItem.bind(this)}\n          todoList={this.state.currentList} \n          updateListChanges={this.updateListChanges.bind(this)} />; \n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n          currentScreen={this.state.currentScreen}\n          todoItem={this.state.currentItem}\n          submitItem={this.submitItem.bind(this)}\n          exitItem={this.exitItem.bind(this)} />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}