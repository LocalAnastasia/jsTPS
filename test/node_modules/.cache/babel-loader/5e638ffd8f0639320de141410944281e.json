{"ast":null,"code":"import _defineProperty from \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nimport jsTPS from './jsTPS/src/jsTPS/jsTPS.js';\nimport todoList from './jsTPS/test/demo/todoList.js';\nimport todoItem from './jsTPS/test/demo/todoItem.js';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.tps = new jsTPS();\n\n    this.initTodoLists = todoLists => {\n      var listOfTodoListsObject = [];\n\n      for (var i = 0; i < todoLists.length; i++) {\n        listOfTodoListsObject.push(this.createListObject(todoLists));\n      }\n\n      return listOfTodoListsObject;\n    };\n\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: this.initTodoLists(testTodoListData.todoLists),\n      currentList: null,\n      currentItem: null,\n      modalIsVisible: false\n    };\n\n    this.deleteList = () => {\n      let newLists = [...this.state.todoLists];\n      newLists = this.removeFromLists(newLists, this.state.currentList.key);\n      this.setState({\n        todoLists: newLists\n      });\n      this.setState({\n        currentList: null\n      });\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goHome = () => {\n      this.tps.clearAllTransactions();\n\n      if (this.state.currentList) {\n        let newList = this.state.currentList;\n\n        if (newList.name.trim() === \"\") {\n          newList.name = \"Untitled\";\n        }\n\n        this.updateListChanges(newList);\n        this.setState({\n          currentList: null\n        });\n      }\n\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goItem = item => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n      this.setState({\n        currentItem: item\n      });\n    };\n\n    this.submitItem = item => {\n      this.updateItem(item);\n      this.exitItem();\n    };\n\n    this.exitItem = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentItem: null\n      });\n    };\n\n    this.updateItem = newItem => {\n      let newList = _objectSpread({}, this.state.currentList);\n\n      let newItems = [...newList.items];\n\n      if (newItem.key === newItems.length) {\n        // If it is a new item\n        newItems = [...newItems, newItem];\n      } else {\n        // If it is an existing item\n        newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n      }\n\n      newList.items = newItems;\n      this.setState({\n        currentList: newList\n      });\n      this.updateListChanges(newList);\n    };\n\n    this.createListObject = list => {\n      var key = list.key;\n      var name = list.name;\n      var owner = list.owner;\n      var items = [];\n\n      for (var i = 0; i < list.getTodoItems().length; i++) {\n        var itemObject = this.createListObjectItem(list.items[i]);\n        items.push(itemObject);\n      }\n\n      var todoListObject = new todoList(key, name, owner, items);\n      return todoListObject;\n    };\n\n    this.createListObjectItem = item => {\n      var key = item.key;\n      var description = item.description;\n      var assignedTo = item.assigned_to;\n      var dueDate = item.due_date;\n      var completed = item.completed;\n      var todoListObjectItem = new todoItem(key, description, assignedTo, dueDate, completed);\n      return todoListObjectItem;\n    };\n\n    this.loadList = todoListToLoad => {\n      var todoList = this.createListObject(todoListToLoad);\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoList\n      });\n    };\n\n    this.updateListChanges = list => {\n      let targetKey = list.key; // Delete old version of list from lists, if it exists\n\n      let newLists = this.removeFromLists([...this.state.todoLists], targetKey); // Add new version of list to top of lists\n\n      newLists = this.addToLists(newLists, list); //Reorder keys\n\n      newLists = this.updateIndices(newLists); // Update state\n\n      this.setState({\n        todoLists: newLists\n      });\n    };\n\n    this.updateIndices = lists => {\n      for (var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n      }\n\n      return lists;\n    };\n\n    this.addToLists = (lists, list) => {\n      return [list, ...lists];\n    };\n\n    this.removeFromLists = (lists, targetKey) => {\n      let newLists = lists.filter(list => list.key !== targetKey);\n      return newLists;\n    };\n  }\n\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          tps: this.tps,\n          deleteList: this.deleteList.bind(this),\n          goHome: this.goHome.bind(this),\n          goItem: this.goItem.bind(this),\n          todoList: this.state.currentList,\n          updateListChanges: this.updateListChanges.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen, {\n          currentScreen: this.state.currentScreen,\n          todoItem: this.state.currentItem,\n          submitItem: this.submitItem.bind(this),\n          exitItem: this.exitItem.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","jsTPS","todoList","todoItem","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","MODAL_SCREEN","App","tps","initTodoLists","todoLists","listOfTodoListsObject","i","length","push","createListObject","state","currentScreen","currentList","currentItem","modalIsVisible","deleteList","newLists","removeFromLists","key","setState","goHome","clearAllTransactions","newList","name","trim","updateListChanges","goItem","item","submitItem","updateItem","exitItem","newItem","newItems","items","map","list","owner","getTodoItems","itemObject","createListObjectItem","todoListObject","description","assignedTo","assigned_to","dueDate","due_date","completed","todoListObjectItem","loadList","todoListToLoad","targetKey","addToLists","updateIndices","lists","filter","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\nimport jsTPS from './jsTPS/src/jsTPS/jsTPS.js'\nimport todoList from './jsTPS/test/demo/todoList.js'\nimport todoItem from './jsTPS/test/demo/todoItem.js'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n}\n\nclass App extends Component {\n  tps = new jsTPS();\n\n  initTodoLists = (todoLists) => {\n    var listOfTodoListsObject = []\n    for (var i = 0; i < todoLists.length; i++) {\n      listOfTodoListsObject.push(this.createListObject(todoLists));\n    }\n\n    return listOfTodoListsObject;\n  }\n  \n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: this.initTodoLists(testTodoListData.todoLists),\n    currentList: null,\n    currentItem: null,\n    modalIsVisible: false\n  }\n\n  deleteList = () => {\n    let newLists = [...this.state.todoLists];\n    newLists = this.removeFromLists(newLists, this.state.currentList.key);\n    this.setState({todoLists: newLists});\n    this.setState({currentList: null});\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goHome = () => {\n    this.tps.clearAllTransactions();\n    if (this.state.currentList){\n      let newList = this.state.currentList;\n      if (newList.name.trim() === \"\") {\n        newList.name = \"Untitled\";\n      }\n      this.updateListChanges(newList);\n      this.setState({currentList: null});\n    }\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goItem = (item) => {\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    this.setState({currentItem: item});\n  }\n  submitItem = (item) => {\n    this.updateItem(item);\n    this.exitItem();\n  }\n\n  exitItem = () => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentItem: null});\n  }\n\n  updateItem = (newItem) => {\n    let newList = {...this.state.currentList};\n    let newItems = [...newList.items];\n    if (newItem.key === newItems.length) { // If it is a new item\n      newItems = [...newItems, newItem];\n    }\n    else { // If it is an existing item\n      newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n    }\n    newList.items = newItems;\n    this.setState({currentList: newList});\n    this.updateListChanges(newList);\n  }\n\n  createListObject = (list) => {\n    var key = list.key;\n    var name = list.name;\n    var owner = list.owner;\n    var items = [];\n    for (var i = 0; i < list.getTodoItems().length; i++) {\n      var itemObject = this.createListObjectItem(list.items[i]);\n      items.push(itemObject);\n    }\n    var todoListObject = new todoList(key, name, owner, items);\n\n    return todoListObject;\n  }\n\n  createListObjectItem = (item) => {\n    var key = item.key;\n    var description = item.description;\n    var assignedTo = item.assigned_to;\n    var dueDate = item.due_date;\n    var completed = item.completed;\n    var todoListObjectItem = new todoItem(key, description, assignedTo, dueDate, completed);\n\n    return todoListObjectItem;\n  }\n  loadList = (todoListToLoad) => {\n    var todoList = this.createListObject(todoListToLoad);\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoList});\n  }\n\n  updateListChanges = (list) => {\n    let targetKey = list.key;\n\n    // Delete old version of list from lists, if it exists\n    let newLists = this.removeFromLists([...this.state.todoLists], targetKey);\n\n    // Add new version of list to top of lists\n    newLists = this.addToLists(newLists, list);\n\n    //Reorder keys\n    newLists = this.updateIndices(newLists);\n\n    // Update state\n    this.setState({todoLists: newLists});\n  }\n\n  updateIndices = (lists) => {\n    for(var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n    }\n    return lists;\n  }\n  \n  // Add to top of lists\n  addToLists = (lists, list) => {\n    return [list, ...lists];\n  }\n  // Remove from lists\n  removeFromLists = (lists, targetKey) => {\n    let newLists = lists.filter(list => list.key !== targetKey);\n    return newLists;\n  }\n\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} />;\n      case AppScreen.LIST_SCREEN:  \n        return <ListScreen\n          tps={this.tps}\n          deleteList={this.deleteList.bind(this)}\n          goHome={this.goHome.bind(this)}\n          goItem={this.goItem.bind(this)}\n          todoList={this.state.currentList} \n          updateListChanges={this.updateListChanges.bind(this)} />; \n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n          currentScreen={this.state.currentScreen}\n          todoItem={this.state.currentItem}\n          submitItem={this.submitItem.bind(this)}\n          exitItem={this.exitItem.bind(this)} />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}