{"ast":null,"code":"import jsTPS_Transaction from './jsTPS_Transaction.js';\n\nclass jsTPS {\n  constructor() {\n    this.transactions = [];\n    this.mostRecentTransaction = -1;\n    this.performingDo = false;\n    this.performingUndo = false;\n  }\n\n  performingDo() {\n    return this.performingDo;\n  }\n\n  performingUndo() {\n    return this.performingUndo;\n  } // Adds to the top of the stack\n  // If there are transactions that were undone (pointer is not at the top of the stack)\n  // Remove all transactions above pointer\n  // Add new transaction to the top of the stack (new transaction above pointer)\n  // Call doTransaction (which will perform transaction and move pointer up)\n\n\n  addTransaction(transaction) {\n    if (this.mostRecentTransaction < 0 || this.mostRecentTransaction < this.transactions.length - 1) {\n      for (var i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n        this.transactions.splice(i, 1);\n      }\n    }\n\n    this.transactions.push(transaction);\n    this.doTransaction();\n  } // If pointer is not at the top of the stack\n  // Perform transaction above pointer\n  // Move pointer up\n\n\n  doTransaction() {\n    if (this.hasTransactionToRedo()) {\n      this.performingDo = true;\n      var transaction = this.transactions[this.mostRecentTransaction + 1];\n      transaction.doTransaction();\n      this.mostRecentTransaction++;\n      this.performingDo = false;\n    }\n  } // Get first transaction to be undone\n  // Which is at pointer\n\n\n  peekUndo() {\n    if (this.hasTransactionToUndo()) {\n      return this.transactions[this.mostRecentTransaction];\n    } else {\n      return null;\n    }\n  } // Get first transaction to be redone\n  // Which is above pointer\n\n\n  peekDo() {\n    if (this.hasTransactionToRedo()) {\n      return this.transactions[this.mostRecentTransaction + 1];\n    } else {\n      return null;\n    }\n  } // If pointer is at least at i = 0 (there are still transactions to be undone)\n  // Undo transaction at pointer\n  // Move pointer down\n\n\n  undoTransaction() {\n    if (this.hasTransactionToUndo()) {\n      this.performingUndo = true;\n      var transaction = this.transactions[this.mostRecentTransaction];\n      transaction.undoTransaction();\n      this.mostRecentTransaction--;\n      this.performingUndo = false;\n    }\n  } // Reset stack and pointer\n\n\n  clearAllTransactions() {\n    this.transactions = [];\n    this.mostRecentTransaction = -1;\n  }\n\n  getSize() {\n    return this.transactions.length;\n  } // Get number of transactions above pointer\n\n\n  getRedoSize() {\n    return this.getSize() - this.mostRecentTransaction - 1;\n  } // Get number of transactions at and below pointer\n\n\n  getUndoSize() {\n    return this.mostRecentTransaction + 1;\n  }\n\n  hasTransactionToUndo() {\n    return this.mostRecentTransaction >= 0;\n  }\n\n  hasTransactionToRedo() {\n    return this.mostRecentTransaction < this.transactions.length - 1;\n  } // String summary of current state of jsTPS\n\n\n  toString() {\n    var text = \"--Number of Transactions: \" + this.transactions.length + \"\\n\";\n    text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n    text += \"--Current Transaction Stack:\\n\";\n\n    for (var i = 0; i <= this.mostRecentTransaction; i++) {\n      var jT = this.transactions[i];\n      text += \"----\" + jT.toString() + \"\\n\";\n    }\n\n    return text;\n  }\n\n}","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/jsTPS/src/jsTPS/jsTPS.js"],"names":["jsTPS_Transaction","jsTPS","constructor","transactions","mostRecentTransaction","performingDo","performingUndo","addTransaction","transaction","length","i","splice","push","doTransaction","hasTransactionToRedo","peekUndo","hasTransactionToUndo","peekDo","undoTransaction","clearAllTransactions","getSize","getRedoSize","getUndoSize","toString","text","jT"],"mappings":"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","sourcesContent":["import jsTPS_Transaction from './jsTPS_Transaction.js'\n\nclass jsTPS {\n    \n    constructor() {\n        this.transactions = [];\n        this.mostRecentTransaction = -1;\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n\n    performingDo() {\n        return this.performingDo;\n    }\n\n    performingUndo() {\n        return this.performingUndo;\n    }\n\n    // Adds to the top of the stack\n    // If there are transactions that were undone (pointer is not at the top of the stack)\n    // Remove all transactions above pointer\n    // Add new transaction to the top of the stack (new transaction above pointer)\n    // Call doTransaction (which will perform transaction and move pointer up)\n    addTransaction(transaction) {\n        if ((this.mostRecentTransaction < 0 || (this.mostRecentTransaction < (this.transactions.length - 1)))) {\n            for (var i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n                this.transactions.splice(i, 1);\n            }\n        }\n\n        this.transactions.push(transaction);\n        this.doTransaction();\n    }\n\n    // If pointer is not at the top of the stack\n    // Perform transaction above pointer\n    // Move pointer up\n    doTransaction() {\n        if (this.hasTransactionToRedo()) {\n            this.performingDo = true;\n            var transaction = this.transactions[this.mostRecentTransaction + 1];\n            transaction.doTransaction();\n            this.mostRecentTransaction++;\n            this.performingDo = false;\n        }      \n    }\n\n    // Get first transaction to be undone\n    // Which is at pointer\n    peekUndo() {\n        if (this.hasTransactionToUndo()) {\n            return this.transactions[this.mostRecentTransaction];\n        }\n        else {\n            return null;\n        }\n    }\n\n    // Get first transaction to be redone\n    // Which is above pointer\n    peekDo() {\n        if (this.hasTransactionToRedo()) {\n            return this.transactions[this.mostRecentTransaction + 1];\n        }\n        else {\n            return null;\n        }   \n    }\n\n    // If pointer is at least at i = 0 (there are still transactions to be undone)\n    // Undo transaction at pointer\n    // Move pointer down\n    undoTransaction() {\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            var transaction = this.transactions[this.mostRecentTransaction];\n            transaction.undoTransaction();\n            this.mostRecentTransaction--;\n            this.performingUndo = false;\n        }    \n    }\n\n    // Reset stack and pointer\n    clearAllTransactions() {\n        this.transactions = [];\n        this.mostRecentTransaction = -1;\n    }\n\n    getSize() {\n        return this.transactions.length;\n    }\n\n    // Get number of transactions above pointer\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    // Get number of transactions at and below pointer\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n\n    hasTransactionToRedo() {\n        return this.mostRecentTransaction < this.transactions.length - 1;\n    }\n\n    // String summary of current state of jsTPS\n    toString() {\n        var text = \"--Number of Transactions: \" + this.transactions.length + \"\\n\";\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n        text += \"--Current Transaction Stack:\\n\";\n        for (var i = 0; i <= this.mostRecentTransaction; i++) {\n            var jT = this.transactions[i];\n            text += \"----\" + jT.toString() + \"\\n\";\n        }\n        return text;\n    }\n}"]},"metadata":{},"sourceType":"module"}