{"ast":null,"code":"import _defineProperty from \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: testTodoListData.todoLists,\n      currentList: null,\n      currentItem: null,\n      modalIsVisible: false\n    };\n\n    this.deleteList = () => {\n      let newLists = [...this.state.todoLists];\n      newLists = this.removeFromLists(newLists, this.state.currentList.key);\n      this.setState({\n        todoLists: newLists\n      });\n      this.setState({\n        currentList: null\n      });\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goHome = () => {\n      if (this.state.currentList) {\n        this.updateListChanges(this.state.currentList);\n        this.setState({\n          currentList: null\n        });\n      }\n\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n    };\n\n    this.goItem = item => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n      this.setState({\n        currentItem: item\n      });\n    };\n\n    this.submitItem = item => {\n      this.updateItem(item);\n      this.exitItem();\n    };\n\n    this.exitItem = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentItem: null\n      });\n    };\n\n    this.updateItem = newItem => {\n      let newList = _objectSpread({}, this.state.currentList);\n\n      let newItems = [...newList.items];\n\n      if (newItem.key === newItems.length) {\n        // If it is a new item\n        newItems = [...newItems, newItem];\n      } else {\n        // If it is an existing item\n        newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n      }\n\n      newList.items = newItems;\n      this.setState({\n        currentList: newList\n      });\n      this.updateListChanges(newList);\n    };\n\n    this.loadList = todoListToLoad => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoListToLoad\n      });\n    };\n\n    this.updateListChanges = list => {\n      let targetKey = list.key;\n\n      if (list.name.trim() === \"\") {\n        list.name = \"Unknown\";\n      } // Delete old version of list from lists, if it exists\n\n\n      let newLists = this.removeFromLists([...this.state.todoLists], targetKey); // Add new version of list to top of lists\n\n      newLists = this.addToLists(newLists); //Reorder keys\n\n      newLists = this.updateIndices(newLists); // Update state\n\n      this.setState({\n        todoLists: newLists\n      });\n    };\n\n    this.updateIndices = lists => {\n      for (var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n      }\n\n      return lists;\n    };\n\n    this.addToLists = (lists, list) => {\n      return [list, ...lists];\n    };\n\n    this.removeFromLists = (lists, targetKey) => {\n      let newLists = lists.filter(list => list.key !== targetKey);\n      return newLists;\n    };\n  }\n\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          deleteList: this.deleteList.bind(this),\n          goHome: this.goHome.bind(this),\n          goItem: this.goItem.bind(this),\n          todoList: this.state.currentList,\n          updateListChanges: this.updateListChanges.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen, {\n          currentScreen: this.state.currentScreen,\n          todoItem: this.state.currentItem,\n          submitItem: this.submitItem.bind(this),\n          exitItem: this.exitItem.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","MODAL_SCREEN","App","state","currentScreen","todoLists","currentList","currentItem","modalIsVisible","deleteList","newLists","removeFromLists","key","setState","goHome","updateListChanges","goItem","item","submitItem","updateItem","exitItem","newItem","newList","newItems","items","length","map","loadList","todoListToLoad","list","targetKey","name","trim","addToLists","updateIndices","lists","i","filter","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n}\n\nclass App extends Component {\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: testTodoListData.todoLists,\n    currentList: null,\n    currentItem: null,\n    modalIsVisible: false\n  }\n\n  deleteList = () => {\n    let newLists = [...this.state.todoLists];\n    newLists = this.removeFromLists(newLists, this.state.currentList.key);\n    this.setState({todoLists: newLists});\n    this.setState({currentList: null});\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goHome = () => {\n    if (this.state.currentList){\n      this.updateListChanges(this.state.currentList);\n      this.setState({currentList: null});\n    }\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n  }\n\n  goItem = (item) => {\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    this.setState({currentItem: item});\n  }\n  submitItem = (item) => {\n    this.updateItem(item);\n    this.exitItem();\n  }\n\n  exitItem = () => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentItem: null});\n  }\n\n  updateItem = (newItem) => {\n    let newList = {...this.state.currentList};\n    let newItems = [...newList.items];\n    if (newItem.key === newItems.length) { // If it is a new item\n      newItems = [...newItems, newItem];\n    }\n    else { // If it is an existing item\n      newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n    }\n    newList.items = newItems;\n    this.setState({currentList: newList});\n    this.updateListChanges(newList);\n  }\n\n  loadList = (todoListToLoad) => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoListToLoad});\n  }\n\n  updateListChanges = (list) => {\n    let targetKey = list.key;\n\n    if (list.name.trim() === \"\") {\n      list.name = \"Unknown\";\n    }\n\n    // Delete old version of list from lists, if it exists\n    let newLists = this.removeFromLists([...this.state.todoLists], targetKey);\n\n    // Add new version of list to top of lists\n    newLists = this.addToLists(newLists, );\n\n    //Reorder keys\n    newLists = this.updateIndices(newLists);\n\n    // Update state\n    this.setState({todoLists: newLists});\n  }\n\n  updateIndices = (lists) => {\n    for(var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n    }\n    return lists;\n  }\n  \n  // Add to top of lists\n  addToLists = (lists, list) => {\n    return [list, ...lists];\n  }\n  // Remove from lists\n  removeFromLists = (lists, targetKey) => {\n    let newLists = lists.filter(list => list.key !== targetKey);\n    return newLists;\n  }\n\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} />;\n      case AppScreen.LIST_SCREEN:  \n        return <ListScreen\n          deleteList={this.deleteList.bind(this)}\n          goHome={this.goHome.bind(this)}\n          goItem={this.goItem.bind(this)}\n          todoList={this.state.currentList} \n          updateListChanges={this.updateListChanges.bind(this)} />; \n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n          currentScreen={this.state.currentScreen}\n          todoItem={this.state.currentItem}\n          submitItem={this.submitItem.bind(this)}\n          exitItem={this.exitItem.bind(this)} />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}