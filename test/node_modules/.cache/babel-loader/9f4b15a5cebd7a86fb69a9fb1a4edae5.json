{"ast":null,"code":"import _defineProperty from \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nimport ModalScreen from './components/modal_screen/ModalScreen';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: testTodoListData.todoLists,\n      currentList: null,\n      currentItem: null,\n      modalIsVisible: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        modalIsVisible: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        modalIsVisible: false\n      });\n    };\n\n    this.deleteList = () => {\n      this.hideModal();\n      this.removeFromLists(this.state.currentList.key);\n      this.goHome();\n    };\n\n    this.goHome = () => {\n      this.updateListChanges(this.state.currentList);\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n      this.setState({\n        currentList: null\n      });\n    };\n\n    this.goItem = item => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n      this.setState({\n        currentItem: item\n      });\n    };\n\n    this.submitItem = item => {\n      this.updateItem(item);\n      this.exitItem();\n    };\n\n    this.exitItem = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentItem: null\n      });\n    };\n\n    this.updateItem = newItem => {\n      let newList = _objectSpread({}, this.state.currentList);\n\n      let newItems = [...newList.items];\n\n      if (newItem.key === newItems.length) {\n        // If it is a new item\n        newItems = [...newItems, newItem];\n      } else {\n        // If it is an existing item\n        newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n      }\n\n      newList.items = newItems;\n      this.setState({\n        currentList: newList\n      });\n      this.updateListChanges(newList);\n    };\n\n    this.loadList = todoListToLoad => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoListToLoad\n      });\n    };\n\n    this.updateListChanges = list => {\n      let targetKey = list.key;\n\n      if (list.name.trim() === \"\") {\n        list.name = \"Unknown\";\n      } // Delete old version of list from lists, if it exists\n\n\n      let newLists = [...this.state.todoLists].filter(list => list.key !== targetKey); // Add new version of list to top of lists\n\n      newLists = [list, ...newLists]; //Reorder keys\n\n      newLists = this.updateIndices(newLists); // Update state\n\n      this.setState({\n        todoLists: newLists\n      });\n    };\n\n    this.updateIndices = lists => {\n      for (var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n      }\n\n      return lists;\n    };\n\n    this.addToLists = list => {\n      let newLists = [...this.state.todoLists];\n      return [list, ...newLists];\n    };\n\n    this.removeFromLists = targetKey => {\n      let newLists = [...this.state.todoLists].filter(list => list.key !== targetKey);\n      return newLists;\n    };\n  }\n\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        if (this.state.modalIsVisible) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, React.createElement(ModalScreen, {\n            hideModal: this.hideModal.bind(this),\n            deleteList: this.deleteList.bind(this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }), React.createElement(ListScreen, {\n            showModal: this.showModal.bind(this),\n            goHome: this.goHome.bind(this),\n            goItem: this.goItem.bind(this),\n            todoList: this.state.currentList,\n            updateListChanges: this.updateListChanges.bind(this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(ListScreen, {\n            showModal: this.showModal.bind(this),\n            goHome: this.goHome.bind(this),\n            goItem: this.goItem.bind(this),\n            todoList: this.state.currentList,\n            updateListChanges: this.updateListChanges.bind(this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138\n            },\n            __self: this\n          });\n        }\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen, {\n          currentScreen: this.state.currentScreen,\n          todoItem: this.state.currentItem,\n          submitItem: this.submitItem.bind(this),\n          exitItem: this.exitItem.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/HW2/hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","ModalScreen","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","MODAL_SCREEN","App","state","currentScreen","todoLists","currentList","currentItem","modalIsVisible","showModal","setState","hideModal","deleteList","removeFromLists","key","goHome","updateListChanges","goItem","item","submitItem","updateItem","exitItem","newItem","newList","newItems","items","length","map","loadList","todoListToLoad","list","targetKey","name","trim","newLists","filter","updateIndices","lists","i","addToLists","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\nimport ModalScreen from './components/modal_screen/ModalScreen'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\",\n  MODAL_SCREEN: \"MODAL_SCREEN\"\n}\n\nclass App extends Component {\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: testTodoListData.todoLists,\n    currentList: null,\n    currentItem: null,\n    modalIsVisible: false\n  }\n\n  showModal = () => {\n    this.setState({modalIsVisible: true});\n  }\n\n  hideModal = () => {\n    this.setState({modalIsVisible: false});\n  }\n\n  deleteList = () => {\n    this.hideModal();\n    this.removeFromLists(this.state.currentList.key);\n    this.goHome();\n  }\n\n  goHome = () => {\n    this.updateListChanges(this.state.currentList);\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n    this.setState({currentList: null});\n  }\n\n  goItem = (item) => {\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    this.setState({currentItem: item});\n  }\n  submitItem = (item) => {\n    this.updateItem(item);\n    this.exitItem();\n  }\n\n  exitItem = () => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentItem: null});\n  }\n\n  updateItem = (newItem) => {\n    let newList = {...this.state.currentList};\n    let newItems = [...newList.items];\n    if (newItem.key === newItems.length) { // If it is a new item\n      newItems = [...newItems, newItem];\n    }\n    else { // If it is an existing item\n      newItems = newItems.map(item => item.key === newItem.key ? newItem : item);\n    }\n    newList.items = newItems;\n    this.setState({currentList: newList});\n    this.updateListChanges(newList);\n  }\n\n  loadList = (todoListToLoad) => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoListToLoad});\n  }\n\n  updateListChanges = (list) => {\n    let targetKey = list.key;\n\n    if (list.name.trim() === \"\") {\n      list.name = \"Unknown\";\n    }\n\n    // Delete old version of list from lists, if it exists\n    let newLists = [...this.state.todoLists].filter(list => list.key !== targetKey);\n\n    // Add new version of list to top of lists\n    newLists = [list, ...newLists];\n\n    //Reorder keys\n    newLists = this.updateIndices(newLists);\n\n    // Update state\n    this.setState({todoLists: newLists});\n  }\n\n  updateIndices = (lists) => {\n    for(var i = 0; i < lists.length; i++) {\n        lists[i].key = i;\n    }\n    return lists;\n  }\n  \n  // Add to top of lists\n  addToLists = (list) => {\n    let newLists = [...this.state.todoLists];\n    return [list, ...newLists]\n  }\n  // Remove from lists\n  removeFromLists = (targetKey) => {\n    let newLists = [...this.state.todoLists].filter(list => list.key !== targetKey);\n    return newLists;\n  }\n\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} />;\n      case AppScreen.LIST_SCREEN:  \n        if (this.state.modalIsVisible) {     \n          return (\n            <div>\n              <ModalScreen \n                hideModal={this.hideModal.bind(this)}\n                deleteList={this.deleteList.bind(this)} />\n              <ListScreen\n                showModal={this.showModal.bind(this)}\n                goHome={this.goHome.bind(this)}\n                goItem={this.goItem.bind(this)}\n                todoList={this.state.currentList} \n                updateListChanges={this.updateListChanges.bind(this)} />\n            </div>\n          )\n        }\n        else {\n          return <ListScreen\n            showModal={this.showModal.bind(this)}\n            goHome={this.goHome.bind(this)}\n            goItem={this.goItem.bind(this)}\n            todoList={this.state.currentList} \n            updateListChanges={this.updateListChanges.bind(this)} />; \n        }\n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n          currentScreen={this.state.currentScreen}\n          todoItem={this.state.currentItem}\n          submitItem={this.submitItem.bind(this)}\n          exitItem={this.exitItem.bind(this)} />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}