{"ast":null,"code":"import AddToNum_Transaction from '../demo/AddToNum_Transaction';\nimport AndMask_Transaction from '../demo/AndMask_Transaction';\nimport OrMask_Transaction from '../demo/OrMask_Transaction';\nimport Num from '../demo/Num';\nimport jsTPS from '.../src/jsTPS/jsTPS';\n\nclass jsTPS_Unit_Tests {\n  assertEquals(val1, val2) {\n    console.assert(val1 == val2);\n  }\n\n  testAdd() {\n    tps = new jsTPS();\n    num = new Num();\n    assertEquals(0, num.getNum()); // ADD 5 TRANSACTION\n\n    tps.addTransaction(new AddToNum_Transaction(num, 5));\n    assertEquals(5, num.getNum());\n    assertEquals(1, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(1, tps.getUndoSize()); // ADD 10 TRANSACTION\n\n    tps.addTransaction(new AddToNum_Transaction(num, 10));\n    assertEquals(15, num.getNum());\n    assertEquals(2, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(2, tps.getUndoSize()); // ADD 15 TRANSACTION\n\n    tps.addTransaction(new AddToNum_Transaction(num, 20));\n    assertEquals(35, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize());\n  }\n\n  testAndMask() {\n    // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n    tps = new jsTPS();\n    num = new Num();\n    assertEquals(0, num.getNum()); // ADD 5 TRANSACTION\n\n    tps.addTransaction(new AddToNum_Transaction(num, 12));\n    tps.addTransaction(new AndMask_Transaction(num, num.getNum(), 4));\n    assertEquals(4, num.getNum());\n    assertEquals(2, tps.getSize());\n    tps.undoTransaction();\n    assertEquals(12, num.getNum());\n    assertEquals(2, tps.getSize());\n    assertEquals(1, tps.getRedoSize());\n    assertEquals(1, tps.getUndoSize());\n  }\n\n  testOrMask() {\n    // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n    tps = new jsTPS();\n    num = new Num();\n    assertEquals(0, num.getNum()); // ADD 5 TRANSACTION\n\n    tps.addTransaction(new AddToNum_Transaction(num, 12));\n    tps.addTransaction(new OrMask_Transaction(num, num.getNum(), 4));\n    assertEquals(12, num.getNum());\n    assertEquals(2, tps.getSize());\n    tps.undoTransaction();\n    assertEquals(12, num.getNum());\n    assertEquals(2, tps.getSize());\n    assertEquals(1, tps.getRedoSize());\n    assertEquals(1, tps.getUndoSize());\n  }\n\n  testUndo() {\n    // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n    tps = new jsTPS();\n    num = new Num();\n    assertEquals(num.getNum(), 0);\n    Assert.assertFalse(tps.hasTransactionToUndo());\n    Assert.assertFalse(tps.hasTransactionToRedo()); // ADD 3 TRANSACTIONS (5, 10, and 15)\n\n    tps.addTransaction(new AddToNum_Transaction(num, 5));\n    tps.addTransaction(new AddToNum_Transaction(num, 10));\n    tps.addTransaction(new AddToNum_Transaction(num, 20));\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertFalse(tps.hasTransactionToRedo());\n    assertEquals(35, num.getNum());\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize()); // UNDO A TRANSACTION\n\n    tps.undoTransaction();\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertTrue(tps.hasTransactionToRedo());\n    assertEquals(15, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(1, tps.getRedoSize());\n    assertEquals(2, tps.getUndoSize()); // UNDO ANOTHER\n\n    tps.undoTransaction();\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertTrue(tps.hasTransactionToRedo());\n    assertEquals(5, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(2, tps.getRedoSize());\n    assertEquals(1, tps.getUndoSize()); // AND ANOTHER\n\n    tps.undoTransaction();\n    Assert.assertFalse(tps.hasTransactionToUndo());\n    Assert.assertTrue(tps.hasTransactionToRedo());\n    assertEquals(0, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(3, tps.getRedoSize());\n    assertEquals(0, tps.getUndoSize()); // WE HAVE NO MORE TO UNDO SO THIS SHOULD DO NOTHING\n\n    tps.undoTransaction();\n    Assert.assertFalse(tps.hasTransactionToUndo());\n    Assert.assertTrue(tps.hasTransactionToRedo());\n    assertEquals(0, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(3, tps.getRedoSize());\n    assertEquals(0, tps.getUndoSize());\n  }\n\n  testRedo() {\n    // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n    tps = new jsTPS();\n    num = new Num();\n    assertEquals(num.getNum(), 0); // ADD 3 TRANSACTIONS (5, 10, and 15)\n\n    tps.addTransaction(new AddToNum_Transaction(num, 5));\n    tps.addTransaction(new AddToNum_Transaction(num, 10));\n    tps.addTransaction(new AddToNum_Transaction(num, 20));\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertFalse(tps.hasTransactionToRedo());\n    assertEquals(35, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize()); // UNDO A TRANSACTION AND THEN REDO IT\n\n    tps.undoTransaction();\n    tps.doTransaction();\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertFalse(tps.hasTransactionToRedo());\n    assertEquals(35, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize()); // UNDO TWO TRANSACTIONS AND THEN REDO THEM\n\n    tps.undoTransaction();\n    tps.undoTransaction();\n    tps.doTransaction();\n    tps.doTransaction();\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertFalse(tps.hasTransactionToRedo());\n    assertEquals(35, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize()); // UNDO ALL THREE TRANSACTIONS AND REDO THEM\n\n    tps.undoTransaction();\n    tps.undoTransaction();\n    tps.undoTransaction();\n    tps.doTransaction();\n    tps.doTransaction();\n    tps.doTransaction();\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertFalse(tps.hasTransactionToRedo());\n    assertEquals(35, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize()); // UNDO THREE TRANSACTIONS AND REDO TWO\n\n    tps.undoTransaction();\n    tps.undoTransaction();\n    tps.undoTransaction();\n    tps.doTransaction();\n    tps.doTransaction();\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertTrue(tps.hasTransactionToRedo());\n    assertEquals(15, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(1, tps.getRedoSize());\n    assertEquals(2, tps.getUndoSize()); // UNDO ALL THREE TRANSACTIONS AND REDO FOUR, WHICH\n    // SHOULD NOT PRODUCE AN ERROR BUT THE LAST\n    // REDO SHOULD DO NOTHING\n\n    tps.undoTransaction();\n    tps.undoTransaction();\n    tps.undoTransaction();\n    tps.doTransaction();\n    tps.doTransaction();\n    tps.doTransaction();\n    tps.doTransaction();\n    Assert.assertTrue(tps.hasTransactionToUndo());\n    Assert.assertFalse(tps.hasTransactionToRedo());\n    assertEquals(35, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize());\n  }\n\n  testClear() {\n    // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n    tps = new jsTPS();\n    num = new Num();\n    assertEquals(num.getNum(), 0); // ADD 3 TRANSACTIONS (5, 10, and 15)\n\n    tps.addTransaction(new AddToNum_Transaction(num, 5));\n    tps.addTransaction(new AddToNum_Transaction(num, 10));\n    tps.addTransaction(new AddToNum_Transaction(num, 20));\n    assertEquals(35, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize()); // CLEAR ALL THE TRANSACTIONS\n\n    tps.clearAllTransactions();\n    assertEquals(35, num.getNum());\n    assertEquals(0, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(0, tps.getUndoSize()); // ADD 3 TRANSACTIONS (5, 10, and 15)\n\n    tps.addTransaction(new AddToNum_Transaction(num, 5));\n    tps.addTransaction(new AddToNum_Transaction(num, 10));\n    tps.addTransaction(new AddToNum_Transaction(num, 20));\n    assertEquals(70, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize()); // CLEAR THEM ALL OUT AGAIN\n\n    tps.clearAllTransactions();\n    assertEquals(70, num.getNum());\n    assertEquals(0, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(0, tps.getUndoSize()); // ADD 3 TRANSACTIONS (5, 10, and 15)\n\n    tps.addTransaction(new AddToNum_Transaction(num, 5));\n    tps.addTransaction(new AddToNum_Transaction(num, 10));\n    tps.addTransaction(new AddToNum_Transaction(num, 20));\n    assertEquals(105, num.getNum());\n    assertEquals(3, tps.getSize());\n    assertEquals(0, tps.getRedoSize());\n    assertEquals(3, tps.getUndoSize());\n  }\n\n}","map":{"version":3,"sources":["/Users/vincentchooi/Documents/University/CSE316/jsTPS/test/src/test_beds/jsTPS_Unit_Tests.js"],"names":["AddToNum_Transaction","AndMask_Transaction","OrMask_Transaction","Num","jsTPS","jsTPS_Unit_Tests","assertEquals","val1","val2","console","assert","testAdd","tps","num","getNum","addTransaction","getSize","getRedoSize","getUndoSize","testAndMask","undoTransaction","testOrMask","testUndo","Assert","assertFalse","hasTransactionToUndo","hasTransactionToRedo","assertTrue","testRedo","doTransaction","testClear","clearAllTransactions"],"mappings":"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","sourcesContent":["import AddToNum_Transaction from '../demo/AddToNum_Transaction'\nimport AndMask_Transaction from '../demo/AndMask_Transaction'\nimport OrMask_Transaction from '../demo/OrMask_Transaction'\nimport Num from '../demo/Num'\nimport jsTPS from '.../src/jsTPS/jsTPS'\n\nclass jsTPS_Unit_Tests {\n\n    assertEquals(val1, val2) {\n        console.assert(val1 == val2);\n    }\n\n    testAdd() {\n        tps = new jsTPS();\n        num = new Num();\n        assertEquals(0, num.getNum());\n        \n        // ADD 5 TRANSACTION\n        tps.addTransaction(new AddToNum_Transaction(num, 5));\n        assertEquals(5, num.getNum());\n        assertEquals(1, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(1, tps.getUndoSize());\n        \n        // ADD 10 TRANSACTION\n        tps.addTransaction(new AddToNum_Transaction(num, 10));\n        assertEquals(15, num.getNum());\n        assertEquals(2, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(2, tps.getUndoSize());\n        \n        // ADD 15 TRANSACTION\n        tps.addTransaction(new AddToNum_Transaction(num, 20));\n        assertEquals(35, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n    }\n    testAndMask() {\n        // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n        tps = new jsTPS();\n        num = new Num();\n        assertEquals(0, num.getNum());\n        \n        // ADD 5 TRANSACTION\n        tps.addTransaction(new AddToNum_Transaction(num, 12));\n        tps.addTransaction(new AndMask_Transaction(num, num.getNum(), 4));\n        assertEquals(4, num.getNum());\n        assertEquals(2, tps.getSize());\n        \n        tps.undoTransaction();\n        assertEquals(12, num.getNum());\n        assertEquals(2, tps.getSize());\n        assertEquals(1, tps.getRedoSize());\n        assertEquals(1, tps.getUndoSize());\n\n    }\n    \n    testOrMask() {\n        // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n        tps = new jsTPS();\n        num = new Num();\n        assertEquals(0, num.getNum());\n        \n        // ADD 5 TRANSACTION\n        tps.addTransaction(new AddToNum_Transaction(num, 12));\n        tps.addTransaction(new OrMask_Transaction(num, num.getNum(), 4));\n        assertEquals(12, num.getNum());\n        assertEquals(2, tps.getSize());\n        \n        tps.undoTransaction();\n        assertEquals(12, num.getNum());\n        assertEquals(2, tps.getSize());\n        assertEquals(1, tps.getRedoSize());\n        assertEquals(1, tps.getUndoSize());\n    }\n\n    testUndo() {\n        // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n        tps = new jsTPS();\n        num = new Num();\n        assertEquals(num.getNum(), 0);\n        Assert.assertFalse(tps.hasTransactionToUndo());\n        Assert.assertFalse(tps.hasTransactionToRedo());\n        \n        // ADD 3 TRANSACTIONS (5, 10, and 15)\n        tps.addTransaction(new AddToNum_Transaction(num, 5));\n        tps.addTransaction(new AddToNum_Transaction(num, 10));\n        tps.addTransaction(new AddToNum_Transaction(num, 20));\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertFalse(tps.hasTransactionToRedo());\n        assertEquals(35, num.getNum());\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n        \n        // UNDO A TRANSACTION\n        tps.undoTransaction();\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertTrue(tps.hasTransactionToRedo());\n        assertEquals(15, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(1, tps.getRedoSize());\n        assertEquals(2, tps.getUndoSize());\n        \n        // UNDO ANOTHER\n        tps.undoTransaction();\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertTrue(tps.hasTransactionToRedo());\n        assertEquals(5, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(2, tps.getRedoSize());\n        assertEquals(1, tps.getUndoSize());\n        \n        // AND ANOTHER\n        tps.undoTransaction();\n        Assert.assertFalse(tps.hasTransactionToUndo());\n        Assert.assertTrue(tps.hasTransactionToRedo());\n        assertEquals(0, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(3, tps.getRedoSize());\n        assertEquals(0, tps.getUndoSize());\n        \n        // WE HAVE NO MORE TO UNDO SO THIS SHOULD DO NOTHING\n        tps.undoTransaction();\n        Assert.assertFalse(tps.hasTransactionToUndo());\n        Assert.assertTrue(tps.hasTransactionToRedo());\n        assertEquals(0, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(3, tps.getRedoSize());\n        assertEquals(0, tps.getUndoSize());\n    }\n        \n        testRedo() {\n        // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n        tps = new jsTPS();\n        num = new Num();\n        assertEquals(num.getNum(), 0);\n        \n        // ADD 3 TRANSACTIONS (5, 10, and 15)\n        tps.addTransaction(new AddToNum_Transaction(num, 5));\n        tps.addTransaction(new AddToNum_Transaction(num, 10));\n        tps.addTransaction(new AddToNum_Transaction(num, 20));\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertFalse(tps.hasTransactionToRedo());\n        assertEquals(35, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n        \n        // UNDO A TRANSACTION AND THEN REDO IT\n        tps.undoTransaction();\n        tps.doTransaction();\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertFalse(tps.hasTransactionToRedo());\n        assertEquals(35, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n        \n        // UNDO TWO TRANSACTIONS AND THEN REDO THEM\n        tps.undoTransaction();\n        tps.undoTransaction();\n        tps.doTransaction();\n        tps.doTransaction();\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertFalse(tps.hasTransactionToRedo());\n        assertEquals(35, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n        \n        // UNDO ALL THREE TRANSACTIONS AND REDO THEM\n        tps.undoTransaction();\n        tps.undoTransaction();\n        tps.undoTransaction();\n        tps.doTransaction();\n        tps.doTransaction();\n        tps.doTransaction();\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertFalse(tps.hasTransactionToRedo());\n        assertEquals(35, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n        \n        // UNDO THREE TRANSACTIONS AND REDO TWO\n        tps.undoTransaction();\n        tps.undoTransaction();\n        tps.undoTransaction();\n        tps.doTransaction();\n        tps.doTransaction();\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertTrue(tps.hasTransactionToRedo());\n        assertEquals(15, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(1, tps.getRedoSize());\n        assertEquals(2, tps.getUndoSize());\n        \n        // UNDO ALL THREE TRANSACTIONS AND REDO FOUR, WHICH\n        // SHOULD NOT PRODUCE AN ERROR BUT THE LAST\n        // REDO SHOULD DO NOTHING\n        tps.undoTransaction();\n        tps.undoTransaction();\n        tps.undoTransaction();\n        tps.doTransaction();\n        tps.doTransaction();\n        tps.doTransaction();\n        tps.doTransaction();\n        Assert.assertTrue(tps.hasTransactionToUndo());\n        Assert.assertFalse(tps.hasTransactionToRedo());\n        assertEquals(35, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n    }    \n\n    testClear() {\n        // WE'LL JUST USE A SIMPLE NUM FOR TESTING\n        tps = new jsTPS();\n        num = new Num();\n        assertEquals(num.getNum(), 0);\n        \n        // ADD 3 TRANSACTIONS (5, 10, and 15)\n        tps.addTransaction(new AddToNum_Transaction(num, 5));\n        tps.addTransaction(new AddToNum_Transaction(num, 10));\n        tps.addTransaction(new AddToNum_Transaction(num, 20));\n        assertEquals(35, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n                \n        // CLEAR ALL THE TRANSACTIONS\n        tps.clearAllTransactions();\n        assertEquals(35, num.getNum());\n        assertEquals(0, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(0, tps.getUndoSize());\n        \n        // ADD 3 TRANSACTIONS (5, 10, and 15)\n        tps.addTransaction(new AddToNum_Transaction(num, 5));\n        tps.addTransaction(new AddToNum_Transaction(num, 10));\n        tps.addTransaction(new AddToNum_Transaction(num, 20));\n        assertEquals(70, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n                \n        // CLEAR THEM ALL OUT AGAIN\n        tps.clearAllTransactions();\n        assertEquals(70, num.getNum());\n        assertEquals(0, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(0, tps.getUndoSize());\n        \n        // ADD 3 TRANSACTIONS (5, 10, and 15)\n        tps.addTransaction(new AddToNum_Transaction(num, 5));\n        tps.addTransaction(new AddToNum_Transaction(num, 10));\n        tps.addTransaction(new AddToNum_Transaction(num, 20));\n        assertEquals(105, num.getNum());\n        assertEquals(3, tps.getSize());\n        assertEquals(0, tps.getRedoSize());\n        assertEquals(3, tps.getUndoSize());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}